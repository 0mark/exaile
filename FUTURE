
random thoughts for beyond 0.3.0; many of these are user requests.


migration:
    allow import of libraries/ratings/album art from amarok, etc.
        - we could use the 0.2 -> 0.3 upgrade framework, assuming it
            is made flexibly enough.

ratings system:
    click on rating column to set
    replace current dropdown with a bar of stars widget, allows dragging to 
        partially fill stars, double click fills up through clicked star.
        - could reuse same widget for rating column
        - this would also work nicely with the new rating system storing values
            as a float, as it can represent and set such a value much more
            accurately than a dropdown.

UPnP support:
    client
    server
    very few players support this yet 
        - rb has a plugin (python)

DAAP Server:
    would require patching python-daap to have server support (likely doable)

Playback Bookmarks:
    allow bookmarking places in the audio file for quick jumping to
    UI? (custom cairo-drawn on/near progressbar?)
    auto-save last position

Cuesheet support:
    parse the CUE at import time and create separate tracks for
        each entry. This would require extra work in both player.py and 
        collection.py to handle it correctly, but allows full integration with 
        the rest of exaile's features.
        - CUE information could be encoded into the URL using a scheme like
            /path/to/a/file.flac#CUE:1
          where 1 is the track we want to play from the CUE.  The player will
            then take care of translating the progress and other data from
            gstreamer's raw values to ones appropriate for the subsection of 
            the file we're actually using.
            - edge cases that may need special handling:
                gapless transition between tracks in the same file
                    - needs to happen for both sequential and random access

Shuffling albums:
    no clue how to do this UI-wise

Library structure handling:
    allow exaile to manage the libraries' on-disk structure
    use ex-falso-like system to determine path
    we can then expose in the UI methods of copying tracks directly into 
        this structure
    this is espeically useful for import from mp3players/cds/etc
    if multiple libraries, allow to specify one as default or to choose 
        which to use on each copy.

Video Playback:
    this could be tricky UI-wise. perhaps expose as another tab in 
        playlist view, with buttons to go fullscreen or separate window
    should probably wait until compiz/video issues are resolved, so we dont 
        have to deal with those complaints
        - resolved as of intrepid for intel, nvidia (maybe ati?)
    use for video podcasts, have a separate collection for videos
    too heavyweight for main perhaps? (is it possible to do as plugin?)

Audiobooks:
    allow a separate collection for audiobooks
    plugin?
    could be automatic by grabbing eveything with a genre of audiobook, but 
        give right-click menu for manual marking as well.
    automatically save/resume position in book (thru bookmarking support above)

Keybindings:
    allow full user-customizable keybinding support
    this may only be doable for when exaile has focus, idk how to make it work 
        globally without using a C library (though with ctypes I guess we can 
        use that)
    
musicbrainz:
    use for cd tagging
    allow analysis and retagging of files, like picard?
        - gst has an ofa element for scanning we can use.

custom stemming:
    e.g. allow trimming of 'A', not just 'The'
    allow locale-dependant stemming?

Context tab/Revamped Info tab:
    simple method:
        - allow plugins to make new tabs
        - move wikipedia info out to a plugin
        - allow putting info panel as a whole or individual tabs into
            the side panel
    advanced method:
        - add an optional amarok-style context tab to the side pane
            - should also allow sub-tabs like amarok's lyrics tab
            - allow hiding of current now-playing area if context tab
                is enabled? may not be feasable as we put buttons in that
                area too.
        - all previous tabs in the info tab can now be added as a pane
            in this context tab (or a sub-tab), siliar to how amarok's
            context pane is divided
        - the info tab would work the same way as the new context tab,
            except as its often wider it should allow panes to be in 
            multiple columns
            - eg: you might have the first tab within info
                display statistics and releated artists, each in its own 
                column, while another tab might show wikipedia info accross 
                the full width
        - in this setup, the context tab would always change to match the 
            current song while the info tab would remain the same. This
            eliminates the current solution of using a checkbox, which takes
            up space and is easy to forget about
    in either case, we could also provide last.fm album/artist info

Content-Matching (involved)
    matching tracks based on tag content rather than loc.
    useful for: detecting moves withing the library, xspf playlists
    ?match by everything or a subset? if x% is the same? efficiency?
    needed? amarok handles files moving by storing the file's checksum in
        the db, perhaps we should do this too.
            hash only part (eg the last 512k), to make it fast.
            problem: some tags (id3v1, some apev2) are stored at the end
                of the file. most tags (id3v2) are at the front. we don't
                want to hash the part containing tags, as that could change
                unlike the actual music itself.
                    hash based on filetype? eg for id3v2-using formats
                    like mp3 use the last part, and for ones like wavpack 
                    that use the end of the file, hash the front?

Advanced DBUS
    allow greater freedom to query, eg allow listing artists, albums
        in collection, searching collection, etc. 

Cross-Fade
    use gst's adder element to combine streams
    use peek() methods on playlists and queue to see next track
        without actually switching to it.
    see crossfade_design for some thoughts on a possible design

Sorting Tags
    ID3 defines TSOA/TSOP/TSOT for purpose of "sort" tags,
    we should support them.
        MP4 also provides such tags
        are there ones for APE/OGG?

random plugin ideas:
    jamendo
    magnatune
    ladspa plugins
    pitch/tempo adjust

DB optimization:
    the current DB in 0.3 is quite fast but also uses a lot of memory
    ideas:
        keep only frequently-used fields in memory, ie. filename, title,
            artist, album, albumartist, genre, tracknumber, and any other
            currently-displayed columns in either collection pane or
            playlist view
        other fields should implement some sort of index on-disk that allows
            fast searching - space used on disk is a non-issue (within reason)
        all of this should be completely transparent, requiring no change to 
            the Track/TrackDB external API
        memory actually seems to be less of an issue than speed, particularly
            on large collections. perhaps just adding some sort of indexing
            to the common fields would be best

HAL outputs:
    allow selection of device to output to via halaudiosink
        - this would very neatly solve the problem of how to allow
            user to select their output device
        - the following HAL keys may be useful:
            - sound cards have sound.* namespace and sound in info.capabilities
                - sound.card_id is a string for displaying to user
            - info.capabilities will contain oss.* or alsa.* namespaces for 
                sound devices
                - alsa.type is playback on playback devices, there
                    doesn't seem to be an equivalent key for oss.
                - .originating_device can be used to group by card
                - .device_id is a string for displaying to user
            - info.capabilities will have access_control and alsa/oss
                for mixers, which might be a better target than the 
                outputs themselves
                - .type is mixer
                - .originating_device can be used to group by card
                - .device_id is a string for displaying to user

Session management:
    we should properly support x session management
        the gnome implementation is available in gnome.ui

GIO/GVFS support:
    requires patching mutagen
    would allow seamless use of music on smb/ftp/sftp shares

Misc UI ideas:
    allow arbitrary tags to be playlist columns

