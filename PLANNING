This is for notes and plans regarding exaile 0.3. 
It should also be used to keep track of what each developer is
currently working on.

Current projects:
    Aren Olson - Dynamic Playlists
    Adam Olsen - Tests (doctests or other)
    Anthony Waters - 

*** QUICK NOTE:  We need to make a way that coders can easily see what 
object export which events, and possibly have a way for this to show up 
in epydoc
**** I think perhaps adding an "Events" section to the docstring for each 
class would be the way to go here. something like:

class TrackDB:
    """
        blah blah blah...

        Events:
            track_added - sent when a track is added to the db
                data: the loc of the track
            track_removed - sent when a track is removed from the db
                data: the loc of the track
    """

this doesn't handle the case where multiple classes emit the same event
though, though I do not know of any cases of that in the current codebase
(except those arising from subclassing which don't count)

Implemented:
    Collection
    Libraries
        now has realtime watching!
    Playlists
        random, repeat
        import/export for m3u/pls/asx/xspf
    Player
    Queue
    Settings
    Event
        signals-like system
    XDG
        exaile's config and data files now stored according to xdg spec
    Logging System
    Smart Playlists
    CD Playback
        doesn't support mp3 CDs yet
    Track Syncronization
        very prelimiary, will need careful watching
    Device Manager
        only for cd right now
    HAL Support
        only for cd right now
    Playlists Manager
        manages persistence of playlists and smart playlists.
    Plugins System
        file format: tar archive (optionally with gzip/bzip2), gets extracted
                into XDG_DATA_HOME, loads from there or XDG_DATA_DIRS
        does not yet allow retrieval from remote server (has stubs)
    Covers
        amazon and last.fm classes should be moved out to plugins
        todo: support embedded covers, cover from filename via tag 
            info (eg. %artist-%album.jpg)
    Internet Radio
        not at all feature-complete, needs shoutcast moved into plugin, etc
    Lyrics Manager

Things that can probably be implemented at this stage:
    Alternate Playback Systems
        will need more abstraction in player.py, but is feasable
        stub for generic Player class exists
    CD Burning
        class in cd.py, takes a Playlist and burns it in order
    CD Ripping
        class in cd.py, rips a CDPlaylist or any track with a cdda loc
    Content-Matching (involved)
        matching tracks based on tag content rather than loc.
        useful for: detecting moves withing the library, xspf playlists
        ?match by everything or a subset? if x% is the same? efficiency?
    Dynamic Playlists
        pluggable backends: allow matching via last.fm, musicbrainz, etc.
        allow combining multiple backends
        store dynamic info for offline use
        allow setting of song 'buffer size', ie how many songs ahead of the
            playing song to queue up. if for some reason the buffer empties,
            fill it back to this level.
    Podcasts 
    DBUS

Other Work-Items:
    Gapless Playback
        doable? difficulty?
        cross-fade too?
    MP3 Player Support (very involved, should wait for a while)
        generic classes subclassable for iPod, MTP and MassStorage players
        create a special Collection for each, load Playlists, etc.
        also should handle transfer, nto necessariliy at first
            transcode on transfer also good
                auto-detect supported formats (allow choosing too)
                transcode only if
                    not in specified format
                    above certain bitrate/filesize?
            algorithms to handle sync?
            allow custom file layout if applicable
        podcast support
            limit number / autodelete old ?
    GUI
        this is a big one, should come very late



==== NOTES ====
xl is to be split into xl and xlgui. All code concerning the display of 
data and receipt of user input through the gui should go into xlgui. code 
that is not dependent upon the gui implementation should go in xl.

all pluggable backends should have all backends implemented as plugins 
unless there is a really good reason to do otherwise. we will ship and 
enable some plugins by default to provide the best out-of-the-box 
experience

=== Contributors ===
list other contributors to 0.3 here so they may be given due credit

AlphaCluster - playlist export for m3u/pls/asx/xspf
