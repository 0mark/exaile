This is for notes and plans regarding exaile 0.3. 
It should also be used to keep track of what each developer is
currently working on.

Current projects:
    Aren Olson - Persistence
    Adam Olsen - DBUS, Podcasts 
    Anthony Waters - 

*** QUICK NOTE:  We need to make a way that coders can easily see what 
object export which events, and possibly have a way for this to show up 
in epydoc
**** I think perhaps adding an "Events" section to the docstring for each 
class would be the way to go here. something like:

class TrackDB:
    """
        blah blah blah...

        Events:
            track_added - sent when a track is added to the db
                data: the loc of the track
            track_removed - sent when a track is removed from the db
                data: the loc of the track
    """

this doesn't handle the case where multiple classes emit the same event
though, though I do not know of any cases of that in the current codebase
(except those arising from subclassing which don't count)

Implemented:
    Collection
    Libraries
        now has realtime watching!
    Playlists
        random, repeat
        import/export for m3u/pls/asx/xspf
    Player
    Queue
    Settings
    Event
        signals-like system
    XDG
        exaile's config and data files now stored according to xdg spec
    Logging System
    Smart Playlists
    CD Playback
        doesn't support mp3 CDs yet
    Track Syncronization
        very prelimiary, will need careful watching
    Device Manager
        only for cd right now
    HAL Support
        only for cd right now
    Playlists Manager
        manages persistence of playlists and smart playlists.
    Plugins System
        file format: tar archive (optionally with gzip/bzip2), gets extracted
                into XDG_DATA_HOME, loads from there or XDG_DATA_DIRS
        does not yet allow retrieval from remote server (has stubs)
    Covers
        amazon and last.fm classes should be moved out to plugins
        todo: support embedded covers, cover from filename via tag 
            info (eg. %artist-%album.jpg)
    Internet Radio
        not at all feature-complete, needs shoutcast moved into plugin, etc
    Lyrics Manager
    Dynamic Playlists
    MMKeys
        Only for gnome >= 2.20

Things that can probably be implemented at this stage:
    Alternate Playback Systems
        will need more abstraction in player.py, but is feasable
        stub for generic Player class exists
    CD Burning
        class in cd.py, takes a Playlist and burns it in order
    CD Ripping
        class in cd.py, rips a CDPlaylist or any track with a cdda loc
    Content-Matching (involved)
        matching tracks based on tag content rather than loc.
        useful for: detecting moves withing the library, xspf playlists
        ?match by everything or a subset? if x% is the same? efficiency?
    DBUS
    Gapless Playback
        because gstreamer is nasty about this, the method is as follows:
            queue up a new stream before the previous one ends
            start the new stream just as the old one ends
        this will involve implementing lookahead in the queue and playlists
            for simplicity, lookahead can return None if random is 
            enabled,as it's not that useful in that case anyway
        ideally, the implementation will allow for cross-fade as well,
            but this is not mandatory
    Podcasts 
    MP3 Player Support
        generic classes subclassable for iPod, MTP and MassStorage players
        create a special Collection for each, load Playlists, etc.
        also should handle transfer, nto necessariliy at first
            transcode on transfer also good
                auto-detect supported formats (allow choosing too)
                transcode only if
                    not in specified format
                    above certain bitrate/filesize?
            algorithms to handle sync?
            allow custom file layout if applicable
        podcast support
            limit number / autodelete old ?
        found on ubuntu forums: "With amarok I can grab a playlist, drag it to my player and Amarok will automatically transfer all the associated songs and generate the playlist on my player. No other app was able to do this." - this is a GOOD IDEA, we should aim for this sort of "Just Works" wherever possible.
    Persistence 
        everything should be persistent, ie. when opening exaile it should appear EXACTLY as it was when you exited.
        todo list:
            fix bugs in playlist persistence - done
            make queue, player persistent
            optimize saving mechanisms to prevent unneeded disk I/O
                done for smart playlists 
                needs doing for general trackdb
                    how? must be done whenever contained track is
                    updated.
            ensure all commits to essential data are atomic
            periodic save to disk so that in event of crash eveything is saved

Other Work-Items:
    GUI
        this is a big one, should come very late
    Conversion
        we need to handle the upgrade process from 0.2->0.3 smoothly
        this should include the collection, settings, plugins,
            playlists, and anything else still relevant in 0.3
        should be the last primary 'feature' implemented
        implement as plugin? that way it can just be unloaded afterwards
            saving a little bit of time and memory

Misc:
    RAM use on large (>10000) collections? Can we get near-constant RAM use like banshee et al manage? On further inspection, banshee is not using constant RAM, rather it is using less than 2kb per track, while 0.3 is currently slightly above 4kb per track. This is still an issue, but less so than before.

==== NOTES ====
xl is to be split into xl and xlgui. All code concerning the display of 
data and receipt of user input through the gui should go into xlgui. code 
that is not dependent upon the gui implementation should go in xl.

all pluggable backends should have all backends implemented as plugins 
unless there is a really good reason to do otherwise. we will ship and 
enable some plugins by default to provide the best out-of-the-box 
experience

plugins to enable by default: 
    all mmkeys plugins
    all lyrics plugins
    all covers plugins
    all dynamic plugins
    all radio plugins

plugins to ship but not enable:
    audioscrobbler - reason: if user doesnt have a lastfm account, useless
            OTOH, should be enlabled if lastfm info was set in 0.2

plugins not to ship:
    helloworld - reason: example plugin not useful to end-user
    any plugin demonstrating regular instability

=== Contributors ===
list other contributors to 0.3 here so they may be given due credit

AlphaCluster - playlist export for m3u/pls/asx/xspf
