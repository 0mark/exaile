This is for notes and plans regarding exaile 0.3. 
It should also be used to keep track of what each contributor is
currently working on.

Current projects:
    Aren Olson - Persistence, Mass Storage MP3 Player (base)
    Adam Olsen - GUI
    Anthony Waters - 
    thiblahute - CD Burning (hasn't been seen in a while)


Implemented:
    Collection
    Libraries
        now has realtime watching!
    Playlists
    Player
    Queue
    Settings
    Event
        signals-like system that doesn't require reference passing
    XDG
        exaile's config and data files now stored according to xdg spec
    Logging System
    Smart Playlists
    CD Playback
        doesn't support mp3 CDs yet
    Track Syncronization
        very prelimiary, will need careful watching
    Device Manager
        only for cd right now
    HAL Support
        only for cd right now
    Playlists Manager
    Plugins System
        file format: tar archive (optionally with gzip/bzip2), gets extracted
                into XDG_DATA_HOME, loads from there or XDG_DATA_DIRS
        does not yet allow retrieval from remote server (has stubs)
    Covers
        todo: support embedded covers, cover from filename via tag 
            info (eg. %artist-%album.jpg)
    Internet Radio
        not at all feature-complete
    Lyrics Manager
    Dynamic Playlists
    MMKeys
        Only for gnome >= 2.20
    Gapless Playback
        limitation: the UI will see the track as changing when the next track
            is 'spooled up', rather than when the change happens. This is a 
            limitation of the current playbin2. In most cases the difference
            should be negligible.
    Equalizer
    Replaygain
        doesn't support creating tags, only reading them
    CD Ripping

Things that can probably be implemented at this stage:
    CD Burning
        class in cd.py, takes a Playlist and burns it in order
        allow mp3 cd burning?
    Content-Matching (involved)
        matching tracks based on tag content rather than loc.
        useful for: detecting moves withing the library, xspf playlists
        ?match by everything or a subset? if x% is the same? efficiency?
        needed? amarok handles files moving by storing the file's checksum in
            the db, perhaps we should do this too.
                hash only part (eg the last 512k), to make it fast.
    DBUS
        allow greater freedom to query, eg allow listing artists, albums
            in collection, searching collection, etc. best wait til after
            StormDB to implement this.
    Podcasts
        separate from radio
        allow flexibility in choice of when (if?) and where to download
        allow streaming if not downloaded
    MP3 Player Support
        generic classes subclassable for iPod, MTP and MassStorage players
        support for each type of player implemented as a plugin
        create a special Collection for each, load Playlists, etc.
        also should handle transfer, nto necessariliy at first
            transcode on transfer also good
                auto-detect supported formats (allow choosing too)
                transcode only if
                    not in specified format
                    above certain bitrate/filesize?
            algorithms to handle sync?
            allow custom file layout if applicable
        podcast support
            limit number / autodelete old ?
            autosync - allow selecting which ones to sync
        found on ubuntu forums: "With amarok I can grab a playlist, drag 
            it to my player and Amarok will automatically 
            transfer all the associated songs and generate the playlist 
            on my player. No other app was able to do this." - this is a GOOD 
            IDEA, we should aim for this sort of "Just Works" wherever possible
    Persistence 
        everything should be persistent, ie. when opening exaile it should appear 
            EXACTLY as it was when you exited.
        todo list:
            make queue, player persistent
            periodic save to disk so that in event of crash eveything is saved
    GUI
        see GUIPLANNING
    Visualizations
        implement as plugin (if possible)
    Cross-Fade
        use gst's adder element to combine streams
        use peek() methods on playlists and queue to see next track
            without actually switching to it.
    Localization
        not only the GUI but all INFO, WARNING and ERROR logs should be 
            translateable
        DEBUG logs do not need to be, as they are largely not intended to be
            seen by users
    One Tag Reading
        make the tagging backends capable of reading a single tag (or a 
        specified subset of tags) on demand. this is needed for things like 
        embedded covers and lyrics which are too large to store in the DB.
        ideally, access to these tags would be exposed transparently via the
        regular track[tag] syntax.

Minor Tasks:
    add comments and docstrings in xl/player.py
    store current sort field in xl.playlist.Playlist, use this in the GUI
    create a method of exposing what the current UI is to plugins, so they can
        load widgets and such appropriately. (xlgui.Main.name?)
    make rating system be a float from 0-100, this lets us seamlessly handle
        information coming from sources that use differing rating systems.
        a negative value will mean "not rated"
        ui will collapse the float value to the nearest value on the scale
            chosen by the user for display, bu tnot alter it until it is changed
    santize plugin extraction (current method is a potential security 
        vulnerability)
    ensure the log file doesn't grow to insane sizes
    sanitize logger to not print passwords when connecting to databases.
        passwords of ANY kind should never be logged, even to debug.

Other Work-Items:
    Conversion
        we need to handle the upgrade process from 0.2->0.3 smoothly
        this should include the collection, settings, plugins,
            playlists, and anything else still relevant in 0.3
        should be the last primary 'feature' implemented
        implement as plugin? that way it can just be unloaded afterwards
            saving a little bit of time and memory.
        alternatively, only import it if firstrun is True. this is likely
            a cleaner and more-efficient method.
        this should also be designed flexibly enough to also handle future
            0.3.x to 0.3.y upgrades, should that be necessary.
    
GUIPLANNING:
    Implemented:
        Collection Panel
            still needs right click menu, double click actions, etc

        Playlists Panel
            still needs right click menu, a way to add custom playlists and
                smart playlists
            still needs to display custom playlists

        Playlist Tabs
            still need to be able to recieve track dragged from a file
                manager like nautilus
        
        Tray Icon
            still needs everything, only does toggle hide now. Egg based
                tray icon not implemented at all.
    
    Needs to be implemented:
        Album Art Manager
        Preferences Dialog
        Library Manager
        Radio Panel
        Podcasts?
        Queueing tracks, display of queued tracks, queue manager
        Rating
        Plugin Manager
            allow local install
        About Dialog
        Visualizations
        SPAT... "stop after track button" like we had in 0.2.  Frankly, I
            wouldn't mind seeing this in a menu instead of on the toolbar.  I hate
            the thing anyway.
        Better search interface (allow for custom queries and etc)
        Smart Playlist editor
        Various Device Panels
            there will be two kinds of these, playlist-based (eg CDs) and 
                collection-based (eg MP3 players)
        Major cleanup of code in xlgui/playlists.py

    Notes:
        use gtk.glade.XML.signal_autoconnect *whenever* possible... this
            is something we didn't do in 0.2 and it was a pain
        devices:
            idea: use separate side tab for each device, with device manager
                option in Tools for advanced config. tabs would be
                auto-generated as new devices are connected, either via HAL
                or the device manager.
                    possible issue: space
                        not likely needing concern, as it is unlikely that
                        more than 3 devices will be plugged in at a time

    Ideas:
        use banshee-type progressbars, ie display a list of all active
            progressbars below the side pane area. This can be used for
            things like collection rescan, cd import, mp3 player sync, etc.
        use libsexy to put album art in tray tooltip (possible?)
            - alternatively, replace tray tooltip with OSD if enabled
        OSD progressbar should be togglable (perhaps make {progressbar}
            element available in customizer?)
        merge SPAT into stop button via right-click or dropdown menu
        allow using any arbitrary tag for a column in the playlist area
        allow custom tag trees for the collection pane
    feature requests:
        PPAT - like SPAT, but pauses instead of stopping. this could easily
            be a toggle for SPAT. (this would let me stop listening between 
            songs, without losing my place like SPAT does) --reacocard


==== NOTES ====
xl is to be split into xl and xlgui. All code concerning the display of 
data and receipt of user input through the gui should go into xlgui. code 
that is not dependent upon the gui implementation should go in xl.

all pluggable backends should have all backends implemented as plugins 
unless there is a really good reason to do otherwise. we will ship and 
enable some plugins by default to provide the best out-of-the-box 
experience.

idea: plugin method allowing it to determine whether it is appropriate to
    enable itself on first run, eg. enable gnomemmkeys only if under gnome.

plugins to enable by default: 
    all mmkeys plugins
    all lyrics plugins
    all covers plugins
    all dynamic plugins
    all radio plugins

plugins to ship but not enable:
    audioscrobbler - reason: if user doesnt have a lastfm account, useless
            OTOH, should be enlabled if lastfm info was set in 0.2

plugins not to ship:
    helloworld - reason: example plugin not useful to end-user
    any plugin demonstrating regular instability

=== Contributors ===
list other contributors to 0.3 here so they may be given due credit

AlphaCluster - playlist export for m3u/pls/asx/xspf
